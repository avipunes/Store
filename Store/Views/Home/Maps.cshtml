@model Store.Models.ViewModel.SuplliersDataView
@{
    ViewBag.Title = "Maps";
    Layout = "~/Views/Shared/_afterLoginLayout.cshtml";
}

<head>
    <style type="text/css">

        aside{ margin-top:55px}
        #map-holder{ width:55%;}

        #map-holder {
            display: block;
            width: 500px;
            height: 450px;
            margin: 55px 0 0 0;
        }

        #text {
            width: 430px;
        }

        #debug {
            position: absolute;
            visibility:hidden;
            top: 20px;
            left: 540px;
            font-size: 11px;
        }
    </style>
    <!--<script src="http://maps.google.com/maps/api/js?key=AIzaSyChdzK2qi0h5iSBTZpjUARAwU4rjDqnl_A&sensor=true"></script>-->
    <script language="JavaScript" type="text/javascript" src="http://maps.google.com/maps/api/js?key=AIzaSyChdzK2qi0h5iSBTZpjUARAwU4rjDqnl_A&sensor=true"></script>
    <script language="JavaScript" type="text/javascript">

            var map = null;

            window.onload = function () {

                // initialize the map
                var mapHolder = document.getElementById("map-holder");
                map = new google.maps.Map(
					mapHolder,
					{
					    zoom: 3,
					    mapTypeId: google.maps.MapTypeId.ROADMAP
					}
				);

                // centering the map

                var address = $(".saddres");

                for (var i = address.length - 1; i >= 0; i--) {
                    log("Address: " + address[i], true);
                    addressToLocation(address[i].innerText, changeMapLocation);
                }

            }

            var name = $(".sname");

            // processing the results
            function changeMapLocation(locations) {
                if (locations && locations.length) {
                    log("Num of results: " + locations.length);
                    var numOfLocations = locations.length;
                    for (var i = 0; i < numOfLocations; i++) {
                        log("- " + locations[i].text + " / <strong>" + locations[i].location.toString() + "</strong>");
                        var marker = new google.maps.Marker({
                            map: map,
                            position: locations[i].location
                        });
                    }
                    map.panTo(locations[0].location);
                    map.setZoom(8);
                } else {
                    log("Num of results: 0");
                }
            }

            // converting the address's string to a google.maps.LatLng object
            function addressToLocation(address, callback) {
                var geocoder = new google.maps.Geocoder();
                geocoder.geocode(
					{
					    address: address
					},
					function (results, status) {

					    var resultLocations = [];

					    if (status == google.maps.GeocoderStatus.OK) {
					        if (results) {
					            var numOfResults = results.length;
					            for (var i = 0; i < numOfResults; i++) {
					                var result = results[i];
					                resultLocations.push(
										{
										    text: result.formatted_address,
										    addressStr: result.formatted_address,
										    location: result.geometry.location
										}
									);
					            };
					        }
					    } else if (status == google.maps.GeocoderStatus.ZERO_RESULTS) {
					        // address not found
					    }

					    if (resultLocations.length > 0) {
					        callback(resultLocations);
					    } else {
					        callback(null);
					    }
					}
				);
            }

            // debugging
            function log(str, clear) {
                var debugHolder = document.getElementById("debug");
                if (clear) {
                    debugHolder.innerHTML = "";
                }
                debugHolder.innerHTML = debugHolder.innerHTML + "<br />" + str;
            }

    </script>

</head>
<body>
    <div id="debug"></div>
    <div class="row">
        <div id="map-holder" class="col-md-6"></div>
        <aside class="col-md-6">
            <table class="table table-striped table-condensed table-hover">
                <tbody>
                    @foreach (var i in Model.suplliers)
                    {
                        <tr>
                            <td class="sname"> @Html.DisplayFor(m => i.SupllierName)</td>
                            <td class="saddres"> @Html.DisplayFor(m => i.SupllierAddress)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </aside>
    </div>
</body>